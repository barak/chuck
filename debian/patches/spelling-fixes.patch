From: "Barak A. Pearlmutter" <bap@debian.org>
Date: Thu, 19 May 2022 11:30:00 +0000
Subject: Fix typos

---
 src/core/chuck_lang.cpp  | 16 ++++++++--------
 src/core/ugen_stk.cpp    |  4 ++--
 src/core/ugen_stk.h      |  2 +-
 src/core/ulib_math.cpp   |  2 +-
 src/host/chuck_audio.cpp |  2 +-
 5 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/core/chuck_lang.cpp b/src/core/chuck_lang.cpp
index 2aa673a..30e505f 100644
--- a/src/core/chuck_lang.cpp
+++ b/src/core/chuck_lang.cpp
@@ -802,53 +802,53 @@ t_CKBOOL init_class_string( Chuck_Env * env, Chuck_Type * type )
     // add find()
     func = make_new_mfun( "int", "find", string_find );
     func->add_arg( "int", "theChar" );
-    func->doc = "get the index of the first occurence of theChar, or -1 if theChar is not found.";
+    func->doc = "get the index of the first occurrence of theChar, or -1 if theChar is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add find()
     func = make_new_mfun( "int", "find", string_findStart );
     func->add_arg( "int", "theChar" );
     func->add_arg( "int", "start" );
-    func->doc = "get the index of the first occurence of theChar at or after the start position, or -1 if theChar is not found.";
+    func->doc = "get the index of the first occurrence of theChar at or after the start position, or -1 if theChar is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add find()
     func = make_new_mfun( "int", "find", string_findStr );
     func->add_arg( "string", "str" );
-    func->doc = "get the index of the first occurence of str, or -1 if str is not found.";
+    func->doc = "get the index of the first occurrence of str, or -1 if str is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add find()
     func = make_new_mfun( "int", "find", string_findStrStart );
     func->add_arg( "string", "str" );
     func->add_arg( "int", "start" );
-    func->doc = "get the index of the first occurence of str at or after the start position, or -1 if str is not found.";
+    func->doc = "get the index of the first occurrence of str at or after the start position, or -1 if str is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add rfind()
     func = make_new_mfun( "int", "rfind", string_rfind );
     func->add_arg( "int", "theChar" );
-    func->doc = "get the index of the last occurence of theChar, or -1 if theChar is not found.";
+    func->doc = "get the index of the last occurrence of theChar, or -1 if theChar is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add rfind()
     func = make_new_mfun( "int", "rfind", string_rfindStart );
     func->add_arg( "int", "theChar" );
     func->add_arg( "int", "start" );
-    func->doc = "get the index of the last occurence of theChar at or before the start position, or -1 if theChar is not found.";
+    func->doc = "get the index of the last occurrence of theChar at or before the start position, or -1 if theChar is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add rfind()
     func = make_new_mfun( "int", "rfind", string_rfindStr );
     func->add_arg( "string", "str" );
-    func->doc = "get the index of the last occurence of str, or -1 if str is not found.";
+    func->doc = "get the index of the last occurrence of str, or -1 if str is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add rfind()
     func = make_new_mfun( "int", "rfind", string_rfindStrStart );
     func->add_arg( "string", "str" );
     func->add_arg( "int", "start" );
-    func->doc = "get the index of the last occurence of str at or before the start position, or -1 if str is not found.";
+    func->doc = "get the index of the last occurrence of str at or before the start position, or -1 if str is not found.";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     // add erase()
diff --git a/src/core/ugen_stk.cpp b/src/core/ugen_stk.cpp
index 412d70d..96ea565 100644
--- a/src/core/ugen_stk.cpp
+++ b/src/core/ugen_stk.cpp
@@ -2755,11 +2755,11 @@ by Perry R. Cook and Gary P. Scavone, 1995 - 2002.";
 
     func = make_new_mfun( "float", "stretch", StifKarp_ctrl_stretch );
     func->add_arg( "float", "value" );
-    func->doc = "set string strech, [0.0-1.0].";
+    func->doc = "set string stretch, [0.0-1.0].";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     func = make_new_mfun( "float", "stretch", StifKarp_cget_stretch );
-    func->doc = "get string strech, [0.0-1.0].";
+    func->doc = "get string stretch, [0.0-1.0].";
     if( !type_engine_import_mfun( env, func ) ) goto error;
 
     func = make_new_mfun( "float", "sustain", StifKarp_ctrl_sustain );
diff --git a/src/core/ugen_stk.h b/src/core/ugen_stk.h
index fd81739..148e198 100644
--- a/src/core/ugen_stk.h
+++ b/src/core/ugen_stk.h
@@ -5195,7 +5195,7 @@ class Sitar : public Instrmnt
     The user is responsible for checking the values
     returned by the read/write methods.  Values
     less than or equal to zero indicate a closed
-    or lost connection or the occurence of an error.
+    or lost connection or the occurrence of an error.
 
     by Perry R. Cook and Gary P. Scavone, 1995 - 2002.
 */
diff --git a/src/core/ulib_math.cpp b/src/core/ulib_math.cpp
index 0decf89..6a89ca5 100644
--- a/src/core/ulib_math.cpp
+++ b/src/core/ulib_math.cpp
@@ -359,7 +359,7 @@ DLL_QUERY libmath_query( Chuck_DL_Query * QUERY )
     // add srandom (1.3.1.0)
     QUERY->add_sfun( QUERY, srandom_impl, "void", "srandom" );
     QUERY->add_arg( QUERY, "int", "seed" );
-    QUERY->doc_func( QUERY, "seed the random nubmer generator." );
+    QUERY->doc_func( QUERY, "seed the random number generator." );
 
     // go ahead and seed (the code can seed again for repeatability; 1.3.1.0)
     // updated to use ck_srandom() wrapper | 1.4.2.0 (ge)
diff --git a/src/host/chuck_audio.cpp b/src/host/chuck_audio.cpp
index d4d0c1b..3ddbdce 100644
--- a/src/host/chuck_audio.cpp
+++ b/src/host/chuck_audio.cpp
@@ -328,7 +328,7 @@ static unsigned int __stdcall watch_dog( void * )
     t_CKUINT priority = XThreadUtil::our_priority;
 
     // log
-    EM_log( CK_LOG_SEVERE, "starting real-time watch dog processs..." );
+    EM_log( CK_LOG_SEVERE, "starting real-time watch dog process..." );
     // push log
     EM_pushlog();
     EM_log( CK_LOG_INFO, "watchdog timeout: %f::second", g_watchdog_timeout );
